<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>cppport-wasm</title>
</head>
<body>
    <script src="cppport-wasm.js"></script>
    <script>
        function encodeBase64(base64) {
            const binString = atob(base64);
            return Uint8Array.from(binString, (m) => m.codePointAt(0));
        }

        function decodeBase64(bytes) {
            const binString = Array.from(bytes, (x) => String.fromCodePoint(x)).join("");
            return btoa(binString);
        }


        Module.onRuntimeInitialized = async() => {
            console.log("cppport-wasm: Started");


            // const email = "foo@bar.baz";

            // const password = "password123!";
            // const passwordSalt = "superSALT321!";

            // const message = "secret message #1 !";
            // const initializeKeyStr = "abcdefghijklmnopqrstuvwxyz123456"; // 32
            // const initializeKeyInt = 123456789; // 9
            // const initializeVectorStr = "abcdefghijklmnopqrstuvwx"; // 24
            // const initializeVectorInt = 987654321; // 9


            // const GenerateSHA1 = Module.cwrap('GenerateSHA1', 'string', ['string']);
            // const GenerateSHA224 = Module.cwrap('GenerateSHA224', 'string', ['string']);
            // const GenerateSHA256 = Module.cwrap('GenerateSHA256', 'string', ['string']);
            // const GenerateSHA384 = Module.cwrap('GenerateSHA384', 'string', ['string']);
            // const GenerateSHA512 = Module.cwrap('GenerateSHA512', 'string', ['string']);
            // const GenerateBLAKE2b = Module.cwrap('GenerateBLAKE2b', 'string', ['string']);
            // const GenerateHasherSCRYPT = Module.cwrap('GenerateHasherSCRYPT', 'string', ['string','string']);


            // const EncryptXChaCha20 = Module.cwrap('EncryptXChaCha20', 'string', ['string','string', 'string']);
            // const DecryptXChaCha20 = Module.cwrap('DecryptXChaCha20', 'string', ['string','string', 'string']);

            // const EncryptCBCAES = Module.cwrap('EncryptCBCAES', 'string', ['string','number', 'number']);
            // const DecryptCBCAES = Module.cwrap('DecryptCBCAES', 'string', ['string','number', 'number']);


            // const SHA1 = GenerateSHA1(email);
            // console.log(`SHA1:\n${SHA1}`);

            // const SHA224 = GenerateSHA224(email);
            // console.log(`SHA224:\n${SHA224}`);

            // const SHA256 = GenerateSHA256(email);
            // console.log(`SHA256:\n${SHA256}`);

            // const SHA384 = GenerateSHA384(email);
            // console.log(`SHA384:\n${SHA384}`);

            // const SHA512 = GenerateSHA512(email);
            // console.log(`SHA512:\n${SHA512}`);

            // const BLAKE2b = GenerateBLAKE2b(email);
            // console.log(`BLAKE2b:\n${BLAKE2b}`);

            // const SCRYPT = GenerateHasherSCRYPT(password, passwordSalt);
            // console.log(`SCRYPT:\n${SCRYPT}`);



            // const XChaCha20Enc = EncryptXChaCha20(message, initializeKeyStr, initializeVectorStr); // Invalid UTF-8 leading byte <0x....> encountered when deserializing a UTF-8 string in wasm memory to a JS string!
            // console.log(`XChaCha20Enc:\n${XChaCha20Enc}`);

            // const XChaChaDec = DecryptXChaCha20(XChaCha20Enc, initializeKeyStr, initializeVectorStr); // Invalid UTF-8 leading byte <0x....> encountered when deserializing a UTF-8 string in wasm memory to a JS string!
            // console.log(`XChaChaDec:\n${XChaChaDec}`);


            // const CbcAesEnc = EncryptCBCAES(message, initializeKeyInt, initializeVectorInt); // Invalid UTF-8 leading byte <0x....> encountered when deserializing a UTF-8 string in wasm memory to a JS string!
            // console.log(`CbcAesEnc:\n${CbcAesEnc}`);

            // const CbcAesDec = DecryptCBCAES(CbcAesEnc, initializeKeyInt, initializeVectorInt); // Invalid UTF-8 leading byte <0x....> encountered when deserializing a UTF-8 string in wasm memory to a JS string!
            // console.log(`CbcAesDec:\n${CbcAesDec}`);


            console.log("cppport-wasm: Finished");
        }
    </script>
</body>
</html>